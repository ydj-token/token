// SPDX-License-Identifier: MIT
pragma solidity ^0.5.8;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract Context {
    constructor() internal {}

    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}

contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    uint256 private _dividePerToken = 0;
    mapping(address => uint256) private _dividePerTokenPaid;
    function getDivideBalance(address _account) internal view returns(uint256) {
       return _dividePerToken.sub(_dividePerTokenPaid[_account]).mul(_balances[_account]).div(1e36);
    }
    function addDivide(uint256 _amount) internal {
        _dividePerToken = _dividePerToken.add(_amount.mul(1e36).div(_totalSupply));
    }
    modifier updateDivide(address _account1, address _account2) {
        _balances[_account1] = _balances[_account1].add(getDivideBalance(_account1));
        _dividePerTokenPaid[_account1] = _dividePerToken;

        _balances[_account2] = _balances[_account2].add(getDivideBalance(_account2));
        _dividePerTokenPaid[_account2] = _dividePerToken;
        _;
    }

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;
    uint256 public maxSupply = 10000000000 * 1e18;

    mapping(address => bool) public whiteNames;
    mapping(address => bool) public blackNames;
    address public marketingAddress;
    uint256 public buyMarketingRate = 3;
    uint256 public buyBurnRate = 3;
    uint256 public sellDivideRate = 3;
    uint256 public sellBurnRate = 3;

    uint256 constant HUNDRED = 100;
    mapping(address => bool) public pairs;

    constructor() public {}

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account].add(getDivideBalance(account));
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal updateDivide(sender, recipient) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(
            blackNames[sender] == false && blackNames[recipient] == false,
            "ERC20: black name"
        );

        uint256 tax = 0;
        uint256 burn = 0;
        if (whiteNames[recipient] == false || whiteNames[sender] == false) {
            if (pairs[sender] == true) {
                if (buyMarketingRate > 0) {
                    tax = amount.mul(buyMarketingRate).div(HUNDRED);
                    _balances[marketingAddress] = _balances[marketingAddress]
                        .add(tax);
                }
                if (buyBurnRate > 0) {
                    burn = amount.mul(buyBurnRate).div(HUNDRED);
                    _burn(sender, burn);
                }
            } else if (pairs[recipient] == true) {
                if (sellDivideRate > 0) {
                    tax = amount.mul(sellDivideRate).div(HUNDRED);
                    addDivide(tax);
                }
                if (sellBurnRate > 0) {
                    burn = amount.mul(sellBurnRate).div(HUNDRED);
                    _burn(sender, burn);
                }
            }
        }

        _balances[sender] = _balances[sender].sub(
            amount.sub(burn),
            "ERC20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(
            amount.sub(tax).sub(burn)
        );

        _dividePerTokenPaid[sender] = _dividePerToken;
        _dividePerTokenPaid[recipient] = _dividePerToken;
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");
        require(
            _totalSupply.add(amount) <= maxSupply,
            "ERC20: cannot mint over max supply"
        );

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(
            amount,
            "ERC20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor(
        string memory name,
        string memory symbol,
        uint8 decimals
    ) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;

        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transfer.selector, to, value)
        );
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
        );
    }

    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(
            token,
            abi.encodeWithSelector(token.approve.selector, spender, value)
        );
    }

    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) {
            // Return data is optional
            // solhint-disable-next-line max-line-length
            require(
                abi.decode(returndata, (bool)),
                "SafeERC20: ERC20 operation did not succeed"
            );
        }
    }
}

contract YDJToken is ERC20, ERC20Detailed {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    address public governance;

    constructor() public ERC20Detailed("YDJ", "YDJ", 18) {
        governance = msg.sender;
        _mint(msg.sender, 10000000000 * 1e18);
    }

    function setGovernance(address _governance) public onlyGovernance {
        governance = _governance;
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }

    modifier onlyGovernance() {
        require(msg.sender == governance, "!governance");
        _;
    }

    function setWhiteName(address account, bool allow) public onlyGovernance {
        whiteNames[account] = allow;
    }

    function setBlackName(address account, bool allow) public onlyGovernance {
        blackNames[account] = allow;
    }

    function setPair(address _pair, bool allow) public onlyGovernance {
        pairs[_pair] = allow;
    }

    function setMarketingAddress(address _marketingAddress)
        public
        onlyGovernance
    {
        marketingAddress = _marketingAddress;
    }

    function setBuyMarketingRate(uint256 _buyMarketingRate)
        public
        onlyGovernance
    {
        buyMarketingRate = _buyMarketingRate;
    }

    function setBuyBurnRate(uint256 _buyBurnRate) public onlyGovernance {
        buyBurnRate = _buyBurnRate;
    }

    function setSellDivideRate(uint256 _sellDivideRate) public onlyGovernance {
        sellDivideRate = _sellDivideRate;
    }

    function setSellBurnRate(uint256 _sellBurnRate) public onlyGovernance {
        sellBurnRate = _sellBurnRate;
    }
}